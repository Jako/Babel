{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Babel","text":"<p>Babel is an Extra for MODx Revolution that helps you to manage your multilingual websites using different contexts. Babel even supports managing several different multilingual websites within one MODx instance by using so-called context groups.</p> <p>Babel maintains links between translated resources. In the manager you can use the Babel Box to easily switch between the different language versions of your resources. Translations can be created automatically by Babel or defined manually.</p> <p>Additionally, Babel can be used to synchronize certain template variables (TVs) of translated resources which should be the same in every context (language).</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.4+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Babel Button on the resource page for creating, linking and updating   translated resources in different contexts</li> <li>Custom manager page for maintaining links between translated resources</li> <li>Snippet for displaying links between the translated resources</li> <li>Snippet for retrieving the ID of a translated resource in a given context</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Permissions Lexicon, the Properties Lexicon and the System Settings Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The Babel project was started in 2010 by Jakob Class. It was improved further by Rico Goldsky, Joshua Luckers and Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for Babel in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install Babel.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>Babel should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of Babel contains a config.json to build that package locally. Use this option, if you want to debug Babel and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Index","text":"<p>Babel contains a Babel Button, a custom manager page and two Snippets.</p>"},{"location":"usage/#babel-button","title":"Babel Button","text":"<p>The Babel Button is located on the top of a resource form. With this button you can create, link and update translated versions of the current resource in different contexts.</p> <p>Hover the button and create, link, update and unlink the translated versions of the current resource.</p> <p></p> <p></p> <p>If you create a link to an existing resource, the following window is displayed. You must select the linked resource via the page tree on the left, by searching for the page title or by entering the target ID directly.</p> <p></p>"},{"location":"usage/#custom-manager-page","title":"Custom Manager Page","text":"<p>The custom manager page contains two tabs.</p>"},{"location":"usage/#contexts","title":"Contexts","text":"<p>In this tab you can manage the translated versions of a resource. The first columns contain information of the source resource (ID, context and pagetitle) and an <code>All</code> column to remove all links to the source resource with a click on the  icon. For each translatable context a grid column is available with two icons. The following icons are available depending on the link state:</p> <ul> <li> to create a new resource to be linked, </li> <li> to link to this resource and its linked resources</li> <li> to update the linked resource</li> <li> to break the link</li> </ul> <p></p>"},{"location":"usage/#settings","title":"Settings","text":"<p>In this tab you can manage the system settings of Babel. The Tab is only shown for users that have the babel_settings or settings permission.</p> <p></p>"},{"location":"usage/#snippets","title":"Snippets","text":"<p>Currently, there are two snippets available for Babel:</p>"},{"location":"usage/#babellinks","title":"BabelLinks","text":"<p>BabelLinks is a snippet that displays links to other languages (contexts) in the frontend. It uses the following snippet properties:</p> Property Description Default activeCls CSS class for the active language link. active ignoreSiteStatus Flag whether to ignore the site_status (when the site is offline) 0 (No) includeUnlinked Flag whether to show unlinked context. 0 (No) resourceId Id of resource of which links to translations should be displayed. - showCurrent Flag whether to show a link to a translation of the current language. 0 (No) showUnpublished Flag whether to show unpublished translations. 0 (No) toArray Flag whether to dump the output as an array instead. 0 (No) toPlaceholder Flag whether to dump the output into the given placeholder's name. - tpl Chunk to display a language link. tplBabellink wrapperTpl Chunk to wrap all language links. The placeholder for all links is [[+babelLinks]]. - <p>You can use the following placeholders in the tpl chunk:</p> Placeholder Description active If link points to a resource of the current active language (context) this placeholder is set to the active CSS class name specified by the activeCls property. Otherwise this placeholder is empty. contextKey Context key of the translated resource. contextName Context name of the translated resource cultureKey Culture key of the translated resource (e.g en, de, fr oder es). You may use the babel lexicon to display the language's name: <code>[[%babel.language_[[+cultureKey]]? &amp;topic=`languages` &amp;namespace=`babel`]]</code> id ID of tranlated resource. If no translation is available this placeholder is empty ('') language Language description in the IANA language subtag registry url Url to linked translation (or site_url of specific language if there is no translated resource available)."},{"location":"usage/#babeltranslation","title":"BabelTranslation","text":"<p>The BabelTranslation snippets returns the ID of a translated resource in a given context. It uses the following snippet properties:</p> Property Description Default contextKey Key of context in which translated resource should be determined. - cultureKey Key of culture in which translated resource should be determined. Used only in case contextKey was not specified. If both omitted the snippet the currently set cultureKey. - resourceId ID of resource of which a translated resource should be determined. - showUnpublished Flag whether to show unpublished translations. 0 (No)"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>Babel uses the following system settings in the namespace <code>babel</code>:</p> Key Name Description Default babel.babelTvName Babel TV Name Name of template variable (TV) in which Babel will store the links between multilingual resources. This TV will be maintained by Babel. babelLanguageLinks babel.contextKeys Context Keys Comma separated list of context keys which should be used to link multilingual resources. - babel.debug Debug Log debug information in the MODX error log. No babel.displayText Button Text Text shown in the Babel button for each context. It can use the following values: language, context, combination language babel.restrictToGroup Restrict To Group Restrict the contexts in the Babel button to the group of the current context. Yes babel.syncTvs Synchronized TVs Comma separated list of template variables (TVs) IDs to be synchronised by Babel. - <p>The button text in the Babel button can use the following values: </p> <ul> <li>language: the contexts are listed with the context language set in the cultureKey context setting.</li> <li>context: the contexts are listed with the context name.</li> <li>combination: the contexts are listed with the context name and the context language set in the cultureKey context setting.</li> </ul>"},{"location":"usage/#permissions","title":"Permissions","text":"<p>Babel has the following permissions for manager users:</p> Permission Description babel_settings Allow a user to manage the Babel system settings the Babel custom manager page. <p>The permission check is not executed for sudo users.</p>"},{"location":"usage/tutorial-seo/","title":"SEO Friendly Multilingual Websites with MODX and Babel","text":""},{"location":"usage/tutorial-seo/#seo-friendly-multilingual-websites-with-modx-and-babel","title":"SEO Friendly Multilingual Websites with MODx and Babel","text":"<p>This is old!</p> <p>This tutorial is a slightly modernized version of the old blog entry on multilingual-modx.com which is available only in the WaybackMachine. It uses a routing plugin for easier maintaining the contexts. The links in the text are updated to actual or to WaybackMachine versions.</p> <p>In my previous article about setting up multilingual websites with MODx and Babel I described a solution which is based on different (sub)domains for each language. This domain based approach is implemented easily but has some drawbacks in a SEO point of view: By using different domains for each language you automatically split up your site into several single sites. Each site will be handled separately by search engines. For example they won't share the same page rank and backlinks. Using one domain and subfolders for each language may improve your site's overall ranking: All backlinks are connected to your top level domain. In this article I'll describe a possible solution of how to setup a multilingual website with MODx and Babel by using one domain and subfolders for each language.</p> <p>This article doesn't focus on the SEO point of view. It's rather a technical tutorial of how to set up a multilingual website by using subfolders. If you'd like to read more about the \"(sub)domains vs. subfolders\" topic you may search the web (there are a lot of articles about this topic) or read some of the following posts of other blogs:</p> <ul> <li>Subfolders v/s Subdomains: Which one to choose for SEO?</li> <li>Subdomains or Subfolders : Which are Better for SEO?</li> <li>Subdomains, Subfolders and Top-Level Domains</li> <li>Subdomains and subdirectories</li> </ul>"},{"location":"usage/tutorial-seo/#technical-background","title":"Technical Background","text":"<p>I'll describe the procedure of setting up the a multilingual site by providing a fictional example site https://\u200bwww.\u200bexample.com. The main website is reachable via https://\u200bwww.\u200bexample.com and is available in two languages:</p> <ul> <li>German: https://\u200bwww.\u200bexample.com/de/</li> <li>English: http://\u200bwww.\u200bexample.com/en/</li> </ul> <p>For each language we are using one context: web for German, en for English.</p>"},{"location":"usage/tutorial-seo/#prerequisites","title":"Prerequisites","text":"<p>Before starting with this tutorial you should be sure that all requirements for a multilingual site are satisfied:</p> <ul> <li>Friendly URLs are enabled: friendly_urls and use_alias_path are set to yes (1)</li> <li> <p>The Apache rewrite engine is activated and the rewrite base is set correctly:</p> <pre><code>RewriteEngine On\nRewriteBase /\n</code></pre> </li> <li> <p>If you're running your site in a non-root directory like /subfolder/mysite/xy you have to define your rewrite base like this:</p> <pre><code>RewriteBase /subfolder/mysite/xy/\n</code></pre> </li> <li> <p>The base URL is set via the  Tag in your HTML head of all your templates:</p> <pre><code>&lt;head&gt;\n    ...\n    &lt;base href=\"[[!++site_url]]\" /&gt;\n    ...\n&lt;/head&gt;\n</code></pre> </li> </ul>"},{"location":"usage/tutorial-seo/#step-by-step-instructions","title":"Step by Step Instructions","text":"<p>You have to follow the five steps described in my previous article about setting up multilingual websites and one additional step:</p> <ol> <li>Create your contexts for each language: no differences to domain based approach.</li> <li> <p>Configure language specific settings of all your contexts: <code>site_url</code>, <code>cultureKey</code> and <code>base_url</code>.</p> <ul> <li>web context: <code>site_url</code>: http://\u200bwww.\u200bexample.com/de/ <code>base_url</code>: /de/</li> <li>en context: <code>site_url</code>: http://\u200bwww.\u200bexample.com/en/ <code>base_url</code>: /en/</li> </ul> <p>Differences to the non SEO version</p> <p>Instead of using different domains in the <code>site_url</code> context setting you have to use subfolders and additionally specifiy the <code>base_url</code> according to the context's <code>cultureKey</code>.</p> <p>Hint</p> <p>You should also define settings like <code>site_start</code> <code>error_page</code> etc. for each of your contexts. To maintain this entries a lot easier you can use the MODX Extra CrossContextsSettings.</p> </li> <li> <p>Grant the \"Load Only\" access policy for all your contexts to the anonymous    group: no differences to domain based approach.</p> </li> <li>Install a routing extra from the MODX repository, i.e. SmartRouting, xRouting    or LangRouter via the MODX package management</li> <li>Install the Babel Extra via package management: no differences to domain based approach.</li> <li> <p>Change existing rewrite rules for friendly URLs and add additional rules to your .htaccess file (see next section for detailed description):</p> <pre><code># redirect all requests to /en/favicon.ico and /de/favicon.ico\n# to /favicon.ico\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/favicon.ico$ favicon.ico [L,QSA]\n\n# redirect all requests to /en/assets* and /de/assets* to /assets*\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/assets(.*)$ assets$2 [L,QSA]\n</code></pre> </li> </ol>"},{"location":"usage/tutorial-seo/#rewrite-rules","title":"Rewrite Rules","text":"<p>To make your multilingual site work properly you have to add some rewrite rules to your .htaccess file which handle requests to your (physically non-existing) language subfolders.</p> <p>If you're using other languages than German and English you have to change the (en|de) part of the rewrite rule according to your needs. For example for a website available in English, Spanish and French you can use the following favicon rewrite rule:</p> <pre><code>RewriteRule ^(en|de|es)/favicon.ico$ favicon.ico [L,QSA]\n</code></pre> <p>Ok, now your pages should be accessible via the language subfolders and linking your pages with relative links should work, too.</p> <p>But there is still a problem regarding relative links: linking assets like CSS, JavaScripts, images etc. won't work properly. Normally all these files are located somewhere in the assets subfolder of your MODx root directory. When including an asset via a relative URL like assets/css/style.css the asset won't be found:</p> <ol> <li>The browser will try to request something like    https://\u200bwww.\u200bexample.com/en/assets/css/style.css because the site's URL    https://\u200bwww.\u200bexample.com/en/ (defined via the <code>site_url</code> context setting in step    2) is used to handle relative URLs.</li> <li>The rewrite rule from above will be applied and the request will be     internally forwarded to    https://\u200bwww.\u200bexample.com/index.php?cultureKey=en&amp;q=assets/css/style.css</li> <li>MODx won't find any resource matching the alias assets/css/style.css and will    return a 404 error code.</li> </ol> <p>To solve this problem you have to add another rewrite rule before the rule from above which internally redirects all request to /[ck]/assets/ to /assets/ where [ck] is a valid culture key:</p> <pre><code>RewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/assets(.*)$ assets$2 [L,QSA]\n</code></pre> <p>Fine! Now you can use relative links for your pages and assets. Including images with TinyMCE should work, too.</p> <p>You may want to add some additional rewrite rules for other files which are being referred via relative URLs. For example the favicon.ico in your root directory:</p> <pre><code>RewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/favicon.ico$ favicon.ico [L,QSA]\n</code></pre> <p>Additionally the server can automatically determine the language when the domain root https://\u200bwww\u200b.example.com/ is requested and perform a redirect to the suitable language version in the following way:</p> <ul> <li>When the accepted language is not German (de) and the root has been   requested (relative request URI is empty) redirect to the English version   (en): see first condition and rewrite rule from below (line 2 and 3).</li> <li>Otherwise, redirect to German version (de) when the root has been requested:   see second rewrite rule from below (line 4).</li> </ul> <pre><code># detect language when requesting the root (/)\nRewriteCond %{HTTP:Accept-Language} !^de [NC]\nRewriteRule ^$ en/ [R=301,L]\nRewriteRule ^$ de/ [R=301,L]\n</code></pre> <p>Hint</p> <p>That's very rudimentary. The condition only checks whether the value of the Accept-Language HTTP header variable begins with the language (culture) key. But this variable contains much more than only a language key: It's a list of preferred (or even non-preferred) keys like this: Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3. The q variable specifies the importance of the language from 0 to 1. Detecting the language with PHP in the gateway plugin is much better. But this is not the topic of this article and will be discussed in another post.</p> <p>Ok now all rules and conditions can be added to your .htaccess file. It's very important to place them in the right order before <code># The Friendly URLs part</code> because Apache goes through the rules from top to bottom:</p> <pre><code># detect language when requesting the root (/)\nRewriteCond %{HTTP:Accept-Language} !^de [NC]\nRewriteRule ^$ en/ [R=301,L]\nRewriteRule ^$ de/ [R=301,L]\n\n# redirect all requests to /en/favicon.ico and /de/favicon.ico\n# to /favicon.ico\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/favicon.ico$ favicon.ico [L,QSA]\n\n# redirect all requests to /en/assets* and /de/assets* to /assets*\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de)/assets(.*)$ assets$2 [L,QSA]\n</code></pre> <p>If you'd like to go deeper into defining rewrite rules you should read more about the Apache mod_rewrite module.</p>"},{"location":"usage/tutorial-seo/#is-this-approach-optimal","title":"Is this approach optimal?","text":"<p>This solution works fine and editors can work as they did before without caring about relative links and subfolders. But I think this approach is rather a workaround than an optimal solution:</p> <ul> <li>When linking assets relatively you link to non-existing \"virtual\" files.</li> <li>By applying the rewrite rules for the assets the same file is served via   several different URLs: https://\u200bwww.\u200bexample.com/assets/css/style.css,   https://\u200bwww.\u200bexample.com/de/assets/css/style.css and   https://\u200bwww.\u200bexample.com/en/assets/css/style.css return the same content.</li> <li>Files which are used in all language versions are not cached for the whole   site by your browser: The browser doesn't know that   https://\u200bwww.\u200bexample.com/de/assets/css/style.css and   https://\u200bwww.\u200bexample.com/en/assets/css/style.css are the same.</li> <li>When working with the GoogleSiteMap Extra you won't be able to serve a   sitemap.xml for your whole site without modifying the Extra manually. This is   because your documents are distributed over several contexts and GoogleSiteMap   is only capable of creating a sitemap for one context. XML sitemaps are very   helpful to tell a search engine bot where to find all your pages. So you   should use them and they should list all pages of your site!</li> </ul> <p>Caution</p> <p>The following section is outdated and will not take place in this form.</p>"},{"location":"usage/tutorial-seo/#the-optimal-approach-babel-23","title":"The optimal approach: Babel 2.3!","text":"<p>In my opinion the \"cleanest\" way to manage a multilingual website would be using one single context for the whole site and placing your documents into resource containers for each language. At the moment Babel doesn't support this approach. But I have already developed a concept of how to change and extend Babel to be able to use the Extra for both approaches: domain based and subfolder based.</p> <p>Therefore I'll introduce an additional level of abstraction into the Babel's architecture which will make it possible to run Babel in domain-based or subfolder-based mode. The look and feel will remain the same and the new version should be compatible with older ones.</p> <p>I'll need to change a lot of code and currently I'm working on some other (payed) projects, too.</p> <p>I hope you like my plans and I appreciate your feedback!</p>"},{"location":"usage/tutorial/","title":"Multilingual Websites with MODX and Babel","text":""},{"location":"usage/tutorial/#multilingual-websites-with-modx-and-babel","title":"Multilingual Websites with MODx and Babel","text":"<p>This is old!</p> <p>This tutorial is a slightly modernized version of the old blog entry on multilingual-modx.com which is available only in the WaybackMachine. It uses a routing plugin for easier maintaining the contexts. The links in the text are updated to actual or to WaybackMachine versions.</p> <p>In the official documentation of the Babel Extra I\u2019ve only provided a short summary of how to setup your MODx contexts for a multilingual website and referred to an outdated tutorial. Many Babel users contacted me or posted an issue on GitHub because they had some troubles with Babel. Most of these troubles were not related to Babel itself but have been caused by setting up the contexts incorrectly. With this small tutorial I want to support you in configuring your multilingual websites with MODx and Babel.</p> <p>Important</p> <p>I've described a more SEO-friendly approach in a new article which you may want to read, too.</p> <p>First of all I want to thank digital butter for their great tutorial which explains how to setup a multilingual website with MODx. I referred to their tutorial in the official documentation. However, since there have been made some changes to the access control system of MODx you have to apply some more steps to setup your multilingual website correctly.</p> <p>In this article I\u2019ll simply list all the steps necessary to setup your multilingual site in a very basic way. I won\u2019t provide as much details as the guys from digital butter did. There are already some helpful resources available on the web where you can obtain additional information:</p> <ul> <li>Tutorial of digital butter</li> <li>Thread in the old MODX forum</li> </ul>"},{"location":"usage/tutorial/#step-by-step-instructions","title":"Step by Step Instructions","text":"<p>Ok. If you have worked through the documents listed above and installed a new clean MODx environment you should be ready to setup your multilingual website.</p> <p>I\u2019ll go through all the necessary steps by configuring an example website which will be available in three languages: English, German and French. The English site will be available via www.\u200bexample.com the German site via www.\u200bexample.de and the French one via www.\u200bexample.fr.</p> <ol> <li> <p>Create your contexts for each language:The default web context will    be used for the English site, a de context for the German and a fr for    the French site:</p> <p></p> </li> <li> <p>Configure language specific settings of all your contexts: <code>site_url</code> and <code>cultureKey</code>.</p> </li> <li>web context: <code>site_url</code>: https://\u200bwww.\u200bexample.com, <code>cultureKey</code>: en</li> <li>de context: <code>site_url</code>: https://\u200bwww.\u200bexample.de, <code>cultureKey</code>: de</li> <li> <p>fr context: <code>site_url</code>: https://\u200bwww.\u200bexample.fr, <code>cultureKey</code>: fr</p> <p></p> </li> <li> <p>Grant the \"Load Only\" access policy for all your contexts to the anonymous    group to let your users load the contexts.</p> </li> </ol> <p></p> <ol> <li> <p>Install a routing extra from the MODX repository, i.e. SmartRouting, xRouting    or LangRouter via the MODX package management</p> </li> <li> <p>Install the Babel Extra via package management.</p> </li> </ol> <p>Now you should be able to create documents and link translations via Babel in your MODx manager. For information about how to use the MODx lexicon feauture you may take a look at the tutorial at digital butter or official documentation.</p>"},{"location":"usage/tutorial/#common-mistakes","title":"Common Mistakes","text":"<p>In order to avoid mistakes during setting up your contexts here are some common mistakes which have been made by users who requested my help:</p> <ul> <li> <p>Babel does not display the correct language of a context   You may have forgotten to configure the cultureKey setting in the specific context. Babel uses this setting to determine the language of a context.</p> </li> <li> <p>Babel does not display all links to translated documents in the front-end   You may have forgotten to grant the \"Load Only\" access policy for your visitors to the specific contexts. Or you may have forgotten to flush the permissions.</p> </li> <li> <p>The site is always displayed in the same language   Check your routing plugin and make sure it works properly.</p> </li> </ul>"},{"location":"usage/tutorial/#further-help","title":"Further Help","text":"<p>Important</p> <p>I've described a more SEO-friendly approach in a new article which you may want to read, too.</p> <p>If you\u2019re still having problem regarding your multilingual site and Babel have a look at the closed issues on GitHub. If you can\u2019t find a solution there, feel free to post a new issue. We try to help you and incorporate your feedback to improve Babel.</p>"}]}